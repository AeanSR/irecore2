/*
    Copyright (C) 2015-2016 Aean(a.k.a. fhsvengetta)
    All rights reserved.

    IreCore is distributed under the terms of The MIT License.
    You should have received a copy of the MIT License along with this program.
    If not, see <http://opensource.org/licenses/mit-license.php>.
    */

#include "gic.h"

QString script_plain(){
    QString script;
    script += QString("-- ") + QApplication::translate("script", "This script is generated by IreCore.") + "\n";
    script += QString("-- ") + QApplication::translate("script", "If we don't set silence mode, IreCore will output to the result tab.") + "\n";
    script += QString("-- ") + QApplication::translate("script", "Just run.") + "\n";
    script += "Run()";
    return script;
}

QString script_scale_factor(
    int scale_delta,
    bool center_scale_delta,
    int scale_stat_mask,
    bool scale_mh,
    bool scale_oh
    ){
    QString script;
    script += QString("-- ") + QApplication::translate("script", "This script is generated by IreCore.") + "\n";
    script += "delta = ";
    script += QString("").setNum(scale_delta) + "\n";
    script += "stats_key = { ";
    for (int i = 0; i < 6; i++){
        const QString stats_key[] = { "gear_str", "gear_crit", "gear_haste", "gear_mastery", "gear_mult", "gear_vers" };
        if (scale_stat_mask & (1 << i)) script += QString("\"") + stats_key[i] + "\", ";
    }
    script += " }\n";
    script += "stats_name= { ";
    for (int i = 0; i < 6; i++){
        const QString stats_name[] = {
            QApplication::translate("gicClass", "Strength"),
            QApplication::translate("gicClass", "Crit Rating"),
            QApplication::translate("gicClass", "Haste Rating"),
            QApplication::translate("gicClass", "Mastery Rating"),
            QApplication::translate("gicClass", "Multistrike Rating"),
            QApplication::translate("gicClass", "Versatility Rating")
        };
        if (scale_stat_mask & (1 << i)) script += QString("\"") + stats_name[i] + "\", ";
    }
    script += " }\n";
    script += "outstr = \"\"\n";
    if (!center_scale_delta) script += "ldps, _, ldpse = Run()\n";
    script += "for i, k in ipairs(stats_key) do\n";
    script += "  value = GetParam(k)\n";
    if (center_scale_delta) script += "  valuel = math.max(0,value - 0.5*delta)\n";
    if (center_scale_delta) script += "  valuer = valuel + delta\n";
    if (!center_scale_delta) script += "  valuer = value + delta\n";
    if (center_scale_delta) script += "  SetParam(k,valuel)\n";
    if (center_scale_delta) script += "  ldps, _, ldpse = Run()\n";
    script += "  SetParam(k,valuer)\n";
    script += "  rdps, _, rdpse = Run()\n";
    script += "  SetParam(k,value)\n";
    script += "  sf = (rdps - ldps) / delta\n";
    script += "  sfe = math.sqrt((ldpse * ldpse + rdpse * rdpse) / delta) \n";
    script += "  outstr = outstr..stats_name[i]..\": \"..string.format(\"%.3f\", sf)\n";
    script += "  outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    script += "end\n";
    if (scale_mh){
        script += "-- " + QApplication::translate("script", "Scale for MH Weapon DPS.") + "\n";
        script += "mhlow = GetParam(\"mh_low\")\n";
        script += "mhhigh = GetParam(\"mh_high\")\n";
        script += "mhspeed = GetParam(\"mh_speed\")\n";
        script += "if mhspeed <= 0 then mhspeed = 1.5 end -- ";
        script += QApplication::translate("script", "If speed is not set IreCore will default it to 1.5") + "\n";
        if (center_scale_delta){
            script += "mhlowl = math.max(0, mhlow - mhspeed * delta * 0.5)\n";
            script += "mhhighl = math.max(0, mhhigh - mhspeed * delta * 0.5)\n";
            script += "SetParam(\"mh_low\", mhlowl)\n";
            script += "SetParam(\"mh_high\", mhhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"mh_low\", mhlowl + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhighl + mhspeed * delta)\n";
        }
        else{
            script += "SetParam(\"mh_low\", mhlow + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhigh + mhspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"mh_low\", mhlow)\n";
        script += "SetParam(\"mh_high\", mhhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt((ldpse * ldpse + rdpse * rdpse) / delta) \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate("script", "Main Hand DPS");
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    }
    if (scale_oh){
        script += "-- " + QApplication::translate("script", "Scale for OH Weapon DPS.") + "\n";
        script += "ohlow = GetParam(\"oh_low\")\n";
        script += "ohhigh = GetParam(\"oh_high\")\n";
        script += "ohspeed = GetParam(\"oh_speed\")\n";
        script += "if ohspeed <= 0 then ohspeed = 1.5 end -- ";
        script += QApplication::translate("script", "If speed is not set IreCore will default it to 1.5") + "\n";
        if (center_scale_delta){
            script += "ohlowl = math.max(0, ohlow - ohspeed * delta * 0.5)\n";
            script += "ohhighl = math.max(0, ohhigh - ohspeed * delta * 0.5)\n";
            script += "SetParam(\"oh_low\", ohlowl)\n";
            script += "SetParam(\"oh_high\", ohhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"oh_low\", ohlowl + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhighl + ohspeed * delta)\n";
        }
        else{
            script += "SetParam(\"oh_low\", ohlow + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhigh + ohspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"oh_low\", ohlow)\n";
        script += "SetParam(\"oh_high\", ohhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse) / delta \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate("script", "Off Hand DPS");
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    }
    script += "print(\"";
    script += QApplication::translate("script", "Scale Factors");
    script += "\")\n";
    script += "print(outstr)\n";
    return script;
}

QString script_trinket_ladder(
    int trinket_slot_str,
    int trinket_slot_crit,
    int trinket_slot_haste,
    int trinket_slot_mastery,
    int trinket_slot_mult,
    int trinket_slot_vers
    ){
    QString script;
    script += QString("-- ") + QApplication::translate("script", "This script is generated by IreCore.") + "\n";
    script += "Silence(true)\n";
    script += QString("-- ") + QApplication::translate("script", "First, deduct trinket permanent stats. (Did you set them correctly in the paperdoll?)") + "\n";
    script += QString("SetParam(\"gear_str-\", ") + QString().setNum(trinket_slot_str) + ")\n";
    script += QString("SetParam(\"gear_crit-\", ") + QString().setNum(trinket_slot_crit) + ")\n";
    script += QString("SetParam(\"gear_haste-\", ") + QString().setNum(trinket_slot_haste) + ")\n";
    script += QString("SetParam(\"gear_mastery-\", ") + QString().setNum(trinket_slot_mastery) + ")\n";
    script += QString("SetParam(\"gear_mult-\", ") + QString().setNum(trinket_slot_mult) + ")\n";
    script += QString("SetParam(\"gear_vers-\", ") + QString().setNum(trinket_slot_vers) + ")\n";
    script += QString("-- ") + QApplication::translate("script", "Forbid trinket specials.") + "\n";
    script += "SetParam(\"trinket1\", \"none\")\n";
    script += "SetParam(\"trinket2\", \"none\")\n";
    script += QString("-- ") + QApplication::translate("script", "Run for benchmark.") + "\n";
    script += "benchmark, _, bme = Run()\n";
    script += QString("print(\"") + QApplication::translate("script", "Benchmark: ") + "\"..string.format(\"%.3f\", benchmark))\n";
    script += QString("-- ") + QApplication::translate("script", "Trinket list.") + "\n";
    script += "trinkets = {\n";
    for (auto i = trinket_ladder().begin(); i != trinket_ladder().end(); i++){
        if (i->not_selected) continue;
        script += QString("  { name=\"") + i->name + QString().sprintf("\", effect=\"%s\", ilvl=\"%d\", upgrade=\"%d\", str=%d, crit=%d, haste=%d, mastery=%d, mult=%d, vers=%d, demonic=%d },\n"
            , trinket_list[trinket_from_id(i->itemid)], i->itemlvl, i->upgrade, i->str, i->crit, i->haste, i->mastery, i->mult, i->vers, i->demonic);
    }
    script += "}\n";
    script += QString("-- ") + QApplication::translate("script", "Get and save some origin parameters.") + "\n";
    script += "demon = GetParam(\"enemy_is_demonic\")\n";
    script += "base_str = GetParam(\"gear_str\")\n";
    script += "base_crit = GetParam(\"gear_crit\")\n";
    script += "base_haste = GetParam(\"gear_haste\")\n";
    script += "base_mastery = GetParam(\"gear_mastery\")\n";
    script += "base_mult = GetParam(\"gear_mult\")\n";
    script += "base_vers = GetParam(\"gear_vers\")\n";
    script += QString("-- ") + QApplication::translate("script", "Start trinket evaluation.") + "\n";
    script += "result = {}\n";
    script += "io.output(\"trinket_ladder.csv\") ";
    script += QString("-- ") + QApplication::translate("script", "Output to CSV file so you could make charts easily.") + "\n";
    script += "io.write(\"\\xEF\\xBB\\xBF\") ";
    script += QString("-- ") + QApplication::translate("script", "Add UTF-8 BOM may let Excel 2007+ recognize Unicode characters.") + "\n";
    script += "for i,t in ipairs(trinkets) do\n";
    script += "  if t[\"demonic\"] == -1 then SetParam(\"enemy_is_demonic\", demon) else SetParam(\"enemy_is_demonic\", t[\"demonic\"]) end\n";
    script += "  SetParam(\"gear_str\", base_str + t[\"str\"])\n";
    script += "  SetParam(\"gear_crit\", base_crit + t[\"crit\"])\n";
    script += "  SetParam(\"gear_haste\", base_haste + t[\"haste\"])\n";
    script += "  SetParam(\"gear_mastery\", base_mastery + t[\"mastery\"])\n";
    script += "  SetParam(\"gear_mult\", base_mult + t[\"mult\"])\n";
    script += "  SetParam(\"gear_vers\", base_vers + t[\"vers\"])\n";
    script += "  SetParam(\"trinket1\", t[\"effect\"])\n";
    script += "  SetParam(\"trinket1_ilvl\", t[\"ilvl\"])\n";
    script += "  dps, _, dpse = Run()\n";
    script += "  dps = dps - benchmark\n";
    script += "  dpse = math.sqrt(dpse * dpse + bme * bme)\n";
    script += "  result[\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"]] = math.floor(dps + 0.5)\n";
    script += "  print(\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"]..\": \"..string.format(\"%.3f\", dps)..\"(+-\"..string.format(\"%.3f\", dpse)..\"), \"..i..\"/\"..#trinkets..\" complete\")\n";
    script += "end\n";
    script += QString("-- ") + QApplication::translate("script", "Sort the result.") + "\n";
    script += "function spairs(t, order)\n";
    script += "  local keys = {}\n";
    script += "  for k in pairs(t) do keys[#keys+1] = k end\n";
    script += "  table.sort(keys, function(a,b) return order(t, a, b) end)\n";
    script += "  local i = 0\n";
    script += "  return function()\n";
    script += "    i = i + 1\n";
    script += "    if keys[i] then return keys[i], t[keys[i]] end\n";
    script += "  end\n";
    script += "end\n";
    script += "print(\"";
    script += QApplication::translate("script", "Trinket Ladder");
    script += "\")\n";
    script += "for k,v in spairs(result, function(t,a,b) return t[b] < t[a] end) do\n";
    script += "  print(k..\": \"..v)\n";
    script += "  io.write(k..\", \"..v..\"\\n\")\n";
    script += "end\n";
    return script;
}