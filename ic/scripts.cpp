/*
    Copyright (C) 2015-2016 Aean(a.k.a. fhsvengetta)
    All rights reserved.

    IreCore is distributed under the terms of The MIT License.
    You should have received a copy of the MIT License along with this program.
    If not, see <http://opensource.org/licenses/mit-license.php>.
*/

#include "gic.h"

QString script_plain() {
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += QString( "-- " ) + QApplication::translate( "script", "If we don't set silence mode, IreCore will output to the result tab." ) + "\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Just run." ) + "\n";
    script += "Run()";
    return script;
}

QString script_scale_factor(
    int scale_delta,
    bool center_scale_delta,
    int scale_stat_mask,
    bool scale_mh,
    bool scale_oh
) {
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += "CreateBarChart() ";
    script += QString( "-- " ) + QApplication::translate( "script", "Create a bar chart to visualize the results." ) + "\n";
    script += "delta = ";
    script += QString( "" ).setNum( scale_delta ) + "\n";
    script += "stats_key = { ";
    for (int i = 0; i < 5; i++) {
        const QString stats_key[] = { "gear_str", "gear_crit", "gear_haste", "gear_mastery", "gear_vers" };
        if (scale_stat_mask & ( 1 << i )) script += QString( "\"" ) + stats_key[i] + "\", ";
    }
    script += " }\n";
    script += "stats_name= { ";
    for (int i = 0; i < 5; i++) {
        const QString stats_name[] = {
            QApplication::translate( "gicClass", "Strength" ),
            QApplication::translate( "gicClass", "Crit Rating" ),
            QApplication::translate( "gicClass", "Haste Rating" ),
            QApplication::translate( "gicClass", "Mastery Rating" ),
            QApplication::translate( "gicClass", "Versatility Rating" )
        };
        if (scale_stat_mask & ( 1 << i )) script += QString( "\"" ) + stats_name[i] + "\", ";
    }
    script += " }\n";
    script += "outstr = \"\"\n";
    if (!center_scale_delta) script += "ldps, _, ldpse = Run()\n";
    script += "for i, k in ipairs(stats_key) do\n";
    script += "  value = GetParam(k)\n";
    if (center_scale_delta) script += "  valuel = math.max(0,value - 0.5*delta)\n";
    if (center_scale_delta) script += "  valuer = valuel + delta\n";
    if (!center_scale_delta) script += "  valuer = value + delta\n";
    if (center_scale_delta) script += "  SetParam(k,valuel)\n";
    if (center_scale_delta) script += "  ldps, _, ldpse = Run()\n";
    script += "  SetParam(k,valuer)\n";
    script += "  rdps, _, rdpse = Run()\n";
    script += "  SetParam(k,value)\n";
    script += "  sf = (rdps - ldps) / delta\n";
    script += "  sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse)  / delta\n";
    script += "  outstr = outstr..stats_name[i]..\": \"..string.format(\"%.3f\", sf)\n";
    script += "  outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    script += "  AddBarData(stats_name[i], sf, sfe)\n";
    script += "end\n";
    if (scale_mh) {
        script += "-- " + QApplication::translate( "script", "Scale for MH Weapon DPS." ) + "\n";
        script += "mhlow = GetParam(\"mh_low\")\n";
        script += "mhhigh = GetParam(\"mh_high\")\n";
        script += "mhspeed = GetParam(\"mh_speed\")\n";
        script += "if mhspeed <= 0 then mhspeed = 1.5 end -- ";
        script += QApplication::translate( "script", "If speed is not set IreCore will default it to 1.5" ) + "\n";
        if (center_scale_delta) {
            script += "mhlowl = math.max(0, mhlow - mhspeed * delta * 0.5)\n";
            script += "mhhighl = math.max(0, mhhigh - mhspeed * delta * 0.5)\n";
            script += "SetParam(\"mh_low\", mhlowl)\n";
            script += "SetParam(\"mh_high\", mhhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"mh_low\", mhlowl + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhighl + mhspeed * delta)\n";
        } else {
            script += "SetParam(\"mh_low\", mhlow + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhigh + mhspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"mh_low\", mhlow)\n";
        script += "SetParam(\"mh_high\", mhhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse) / delta \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate( "script", "Main Hand DPS" );
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
        script += QString( "AddBarData(\"" ) + QApplication::translate( "script", "Main Hand DPS" ) + "\", sf, sfe)\n";
    }
    if (scale_oh) {
        script += "-- " + QApplication::translate( "script", "Scale for OH Weapon DPS." ) + "\n";
        script += "ohlow = GetParam(\"oh_low\")\n";
        script += "ohhigh = GetParam(\"oh_high\")\n";
        script += "ohspeed = GetParam(\"oh_speed\")\n";
        script += "if ohspeed <= 0 then ohspeed = 1.5 end -- ";
        script += QApplication::translate( "script", "If speed is not set IreCore will default it to 1.5" ) + "\n";
        if (center_scale_delta) {
            script += "ohlowl = math.max(0, ohlow - ohspeed * delta * 0.5)\n";
            script += "ohhighl = math.max(0, ohhigh - ohspeed * delta * 0.5)\n";
            script += "SetParam(\"oh_low\", ohlowl)\n";
            script += "SetParam(\"oh_high\", ohhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"oh_low\", ohlowl + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhighl + ohspeed * delta)\n";
        } else {
            script += "SetParam(\"oh_low\", ohlow + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhigh + ohspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"oh_low\", ohlow)\n";
        script += "SetParam(\"oh_high\", ohhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse) / delta \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate( "script", "Off Hand DPS" );
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
        script += QString( "AddBarData(\"" ) + QApplication::translate( "script", "Off Hand DPS" ) + "\", sf, sfe)\n";
    }
    script += "print(\"";
    script += QApplication::translate( "script", "Scale Factors" );
    script += "\")\n";
    script += "print(outstr)\n";
    script += "FinishBarChart()\n";
    return script;
}

QString script_trinket_ladder(
    int trinket_slot_str,
    int trinket_slot_crit,
    int trinket_slot_haste,
    int trinket_slot_mastery,
    int trinket_slot_vers
) {
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += "CreateBarChart() ";
    script += QString( "-- " ) + QApplication::translate( "script", "Create a bar chart to visualize the results." ) + "\n";
    script += "Silence(true)\n";
    script += QString( "-- " ) + QApplication::translate( "script", "First, deduct trinket permanent stats. (Did you set them correctly in the paperdoll?)" ) + "\n";
    script += QString( "SetParam(\"gear_str-\", " ) + QString().setNum( trinket_slot_str ) + ")\n";
    script += QString( "SetParam(\"gear_crit-\", " ) + QString().setNum( trinket_slot_crit ) + ")\n";
    script += QString( "SetParam(\"gear_haste-\", " ) + QString().setNum( trinket_slot_haste ) + ")\n";
    script += QString( "SetParam(\"gear_mastery-\", " ) + QString().setNum( trinket_slot_mastery ) + ")\n";
    script += QString( "SetParam(\"gear_vers-\", " ) + QString().setNum( trinket_slot_vers ) + ")\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Forbid trinket specials." ) + "\n";
    script += "SetParam(\"trinket1\", \"none\")\n";
    script += "SetParam(\"trinket2\", \"none\")\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Run for benchmark." ) + "\n";
    script += "benchmark, _, bme = Run()\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Benchmark: " ) + "\"..string.format(\"%.3f\", benchmark))\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Trinket list." ) + "\n";
    script += "trinkets = {\n";
    for (auto i = trinket_ladder().begin(); i != trinket_ladder().end(); i++) {
        if (i->not_selected) continue;
        script += QString( "  { name=\"" ) + i->name + QString().sprintf( "\", effect=\"%s\", ilvl=\"%d\", upgrade=\"%d\", str=%d, crit=%d, haste=%d, mastery=%d, vers=%d, demonic=%d },\n"
            , trinket_list[trinket_from_id( i->itemid )], i->itemlvl, i->upgrade, i->str, i->crit, i->haste, i->mastery, i->vers, i->demonic );
    }
    script += "}\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Get and save some origin parameters." ) + "\n";
    script += "demon = GetParam(\"enemy_is_demonic\")\n";
    script += "base_str = GetParam(\"gear_str\")\n";
    script += "base_crit = GetParam(\"gear_crit\")\n";
    script += "base_haste = GetParam(\"gear_haste\")\n";
    script += "base_mastery = GetParam(\"gear_mastery\")\n";
    script += "base_vers = GetParam(\"gear_vers\")\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Start trinket evaluation." ) + "\n";
    script += "result = {}\n";
    script += "io.output(\"trinket_ladder.csv\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Output to CSV file so you could make charts easily." ) + "\n";
    script += "io.write(\"\\xEF\\xBB\\xBF\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Add UTF-8 BOM may let Excel 2007+ recognize Unicode characters." ) + "\n";
    script += "for i,t in ipairs(trinkets) do\n";
    script += "  if t[\"demonic\"] == -1 then SetParam(\"enemy_is_demonic\", demon) else SetParam(\"enemy_is_demonic\", t[\"demonic\"]) end\n";
    script += "  SetParam(\"gear_str\", base_str + t[\"str\"])\n";
    script += "  SetParam(\"gear_crit\", base_crit + t[\"crit\"])\n";
    script += "  SetParam(\"gear_haste\", base_haste + t[\"haste\"])\n";
    script += "  SetParam(\"gear_mastery\", base_mastery + t[\"mastery\"])\n";
    script += "  SetParam(\"gear_vers\", base_vers + t[\"vers\"])\n";
    script += "  SetParam(\"trinket1\", t[\"effect\"])\n";
    script += "  SetParam(\"trinket1_ilvl\", t[\"ilvl\"])\n";
    script += "  dps, _, dpse = Run()\n";
    script += "  dps = dps - benchmark\n";
    script += "  dpse = math.sqrt(dpse * dpse + bme * bme)\n";
    script += "  result[\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"]] = math.floor(dps + 0.5)\n";
    script += "  AddBarData(\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"], dps, dpse)\n";
    script += "  print(\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"]..\": \"..string.format(\"%.3f\", dps)..\"(+-\"..string.format(\"%.3f\", dpse)..\"), \"..i..\"/\"..#trinkets..\" complete\")\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Sort the result." ) + "\n";
    script += "function spairs(t, order)\n";
    script += "  local keys = {}\n";
    script += "  for k in pairs(t) do keys[#keys+1] = k end\n";
    script += "  table.sort(keys, function(a,b) return order(t, a, b) end)\n";
    script += "  local i = 0\n";
    script += "  return function()\n";
    script += "    i = i + 1\n";
    script += "    if keys[i] then return keys[i], t[keys[i]] end\n";
    script += "  end\n";
    script += "end\n";
    script += "print(\"";
    script += QApplication::translate( "script", "Trinket Ladder" );
    script += "\")\n";
    script += "for k,v in spairs(result, function(t,a,b) return t[b] < t[a] end) do\n";
    script += "  print(k..\": \"..v)\n";
    script += "  io.write(k..\", \"..v..\"\\n\")\n";
    script += "end\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Result saved as \\\"trinket_ladder.csv\\\"." ) + "\")\n";
    script += "FinishBarChart()\n";
    return script;
}

QString script_stat_maxima(
    float confidence,
    int delta,
    int min_delta,
    int max_iteration
) {
    QString script;

    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += "stats_name= { ";
    for (int i = 0; i < 4; i++) {
        const QString stats_name[] = {
            QApplication::translate( "gicClass", "Crit" ),
            QApplication::translate( "gicClass", "Haste" ),
            QApplication::translate( "gicClass", "Mastery" ),
            QApplication::translate( "gicClass", "Versatility" )
        };
        script += QString( "\"" ) + stats_name[i] + "\", ";
    }
    script += " }\n";
    script += "Silence(true)\n";
    script += QString( "confidence = " ) + QString().setNum( confidence ) + "\n";
    script += QString( "delta = " ) + QString().setNum( delta ) + "\n";
    script += QString( "min_delta = " ) + QString().setNum( min_delta ) + "\n";
    script += QString( "max_iteration = " ) + QString().setNum( max_iteration ) + "\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Simulation result is saved in hash table." ) + "\n";
    script += "giteration = {}\n";
    script += "gdps = {}\n";
    script += "gerror = {}\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Shallow copy function for array / simple table." ) + "\n";
    script += "function copy(orig)\n";
    script += "  local orig_type = type(orig)\n";
    script += "  local ntbl\n";
    script += "  if orig_type == 'table' then\n";
    script += "    ntbl = {}\n";
    script += "    for orig_key, orig_value in pairs(orig) do\n";
    script += "      ntbl[orig_key] = orig_value\n";
    script += "    end\n";
    script += "  else\n";
    script += "    ntbl = orig\n";
    script += "  end\n";
    script += "  return ntbl\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Key used in hash table." ) + "\n";
    script += "function Key(s)\n";
    script += "  return string.format(\"%d,%d,%d,%d\",s[1],s[2],s[3],s[4])\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Set stats into simulation." ) + "\n";
    script += "function SetStat(s)\n";
    script += "  SetParam(\"gear_crit\", s[1])\n";
    script += "  SetParam(\"gear_haste\", s[2])\n";
    script += "  SetParam(\"gear_mastery\", s[3])\n";
    script += "  SetParam(\"gear_vers\", s[4])\n";
    script += "  return\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Confident level to compare two points." ) + "\n";
    script += "function ConfLvl(s1,s2)\n";
    script += "  if not giteration[Key(s1)] or not giteration[Key(s2)] then\n";
    script += "    return 0\n";
    script += "  else\n";
    script += "    return DPSCompareConfidence(gdps[Key(s1)],gerror[Key(s1)],gdps[Key(s2)],gerror[Key(s2)])\n";
    script += "  end\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Repeat simulation until error is lesser than given target." ) + "\n";
    script += "function RunTargetError(s,e,m)\n";
    script += "  SetStat(s)\n";
    script += "  local error = gerror[Key(s)] or (e + 1)\n";
    script += "  local iter = giteration[Key(s)] or 0\n";
    script += "  local dps = gdps[Key(s)] or 0\n";
    script += "  while error > e and iter < m do\n";
    script += "    local more_iter = math.min(1000 + math.floor(iter * error * error / e / e), m - iter, 100000)\n";
    script += "    SetParam(\"iterations\", more_iter)\n";
    script += "    local more_dps, _, more_error = Run()\n";
    script += "    dps = (dps * iter + more_dps * more_iter) / (iter + more_iter)\n";
    script += "    error = math.sqrt((error * error * iter * iter + more_error * more_error * more_iter * more_iter))\n";
    script += "            / (iter + more_iter)\n";
    script += "    iter = iter + more_iter\n";
    script += "  end\n";
    script += "  gdps[Key(s)] = dps\n";
    script += "  giteration[Key(s)] = iter\n";
    script += "  gerror[Key(s)] = error\n";
    script += "  return dps, error\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Start from current stats." ) + "\n";
    script += "os = {\n";
    script += "  GetParam(\"gear_crit\"),\n";
    script += "  GetParam(\"gear_haste\"),\n";
    script += "  GetParam(\"gear_mastery\"),\n";
    script += "  GetParam(\"gear_vers\")\n";
    script += "}\n";
    script += "RunTargetError(os,1,1000)\n";
    script += QString( "-- " ) + QApplication::translate( "script", "If delta reached min_delta, stop climbing." ) + "\n";
    script += "while delta >= min_delta do\n";
    script += "  found = false\n";
    script += "  reserved = false\n";
    script += "  rs = copy(os) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Reserved point." ) + "\n";
    script += "  ns = copy(os) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Testing point." ) + "\n";
    script += "  repeat ";
    script += QString( "-- " ) + QApplication::translate( "script", "While better points could be found." ) + "\n";
    script += "    found = false\n";
    script += "    reserved = false\n";
    script += "    for i=0,4*4-1 do ";
    script += QString( "-- " ) + QApplication::translate( "script", "For each direction." ) + "\n";
    script += "      dec = math.floor(i / 4)\n";
    script += "      inc = i - dec * 4\n";
    script += "      dec, inc = dec + 1, inc + 1\n";
    script += "      if os[dec] >= delta and dec ~= inc then\n";
    script += "        ns = copy(os) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Move test point towards that." ) + "\n";
    script += "        ns[dec] = ns[dec] - delta\n";
    script += "        ns[inc] = ns[inc] + delta\n";
    script += "        if not giteration[Key(ns)] then ";
    script += QString( "-- " ) + QApplication::translate( "script", "Only test untouched points." ) + "\n";
    script += "          print(string.format(\"test +%d%s -%d%s\",delta,stats_name[inc],delta,stats_name[dec]))\n";
    script += "          RunTargetError(ns,1,1000)\n";
    script += "          while ConfLvl(os,ns) < confidence do ";
    script += QString( "-- " ) + QApplication::translate( "script", "Until confidence suffices." ) + "\n";
    script += "            RunTargetError(ns,gerror[Key(ns)]*0.9,max_iteration)\n";
    script += "            print(string.format(\"  dps %.1f %.1f, error %.3f %.3f, conf %.3f\",\n";
    script += "                         gdps[Key(os)],gdps[Key(ns)],gerror[Key(os)],gerror[Key(ns)],ConfLvl(os,ns)))\n";
    script += "            RunTargetError(os,gerror[Key(os)]*0.9,max_iteration)\n";
    script += "            print(string.format(\"  dps %.1f %.1f, error %.3f %.3f, conf %.3f\",\n";
    script += "                         gdps[Key(os)],gdps[Key(ns)],gerror[Key(os)],gerror[Key(ns)],ConfLvl(os,ns)))\n";
    script += QString( "            -- " ) + QApplication::translate( "script", "If both point reached its iteration limit." ) + "\n";
    script += "            if giteration[Key(ns)] >= max_iteration and giteration[Key(os)] >= max_iteration then\n";
    script += "              if gdps[Key(ns)] > gdps[Key(os)] and not reserved then\n";
    script += QString( "                -- " ) + QApplication::translate( "script", "Trust the result as is." ) + "\n";
    script += "                reserved = true\n";
    script += "                rs = copy(ns)\n";
    script += "                print(\"  test iteration exceeded. reserved.\")\n";
    script += "                break\n";
    script += "              else\n";
    script += "                print(\"  test iteration exceeded. not reserved.\")\n";
    script += "                break\n";
    script += "              end\n";
    script += "            end\n";
    script += "          end\n";
    script += QString( "          -- " ) + QApplication::translate( "script", "Now we have sufficient confidence to compare." ) + "\n";
    script += "          if gdps[Key(ns)] > gdps[Key(os)] and ConfLvl(os,ns) >= confidence then\n";
    script += "            found = true\n";
    script += "            os = copy(ns) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Move to higher point." ) + "\n";
    script += "            print(string.format(\"go +%s -%s to (%s) dps %.1f\",\n";
    script += "                         stats_name[inc],stats_name[dec],Key(ns),gdps[Key(ns)]))\n";
    script += "            break\n";
    script += "          end\n";
    script += "        end\n";
    script += "      end\n";
    script += "    end\n";
    script += "    if not found and reserved then ";
    script += QString( "-- " ) + QApplication::translate( "script", "Higher point found with lesser confidence." ) + "\n";
    script += "      found = true\n";
    script += "      os = copy(rs) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Move to higher point regardless confidence." ) + "\n";
    script += "      print(string.format(\"go reserved, to (%s) dps %.1f\",Key(rs),gdps[Key(rs)]))\n";
    script += "    end\n";
    script += "  until not found\n";
    script += QString( "  -- " ) + QApplication::translate( "script", "No points found. We are at local maxima of current scale." ) + "\n";
    script += QString( "  -- " ) + QApplication::translate( "script", "Scale down, until min_delta reached." ) + "\n";
    script += "  if delta <= min_delta then\n";
    script += "    delta = min_delta - 1\n";
    script += "  else\n";
    script += "    delta = math.max(math.floor(delta * 0.618), min_delta)\n";
    script += "  end\n";
    script += "end\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Maxima confirmed. Gear value:" ) + "\")\n";
    script += "for i,v in ipairs(os) do\n";
    script += "  print(stats_name[i]..\": \"..string.format(\"%d\",v))\n";
    script += "end\n";
    script += "os[1] = math.floor(os[1] * 1.05 + 0.5)\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Unbuffed character sheet value:" ) + "\")\n";
    script += "for i,v in ipairs(os) do\n";
    script += "  print(stats_name[i]..\": \"..string.format(\"%d\",v))\n";
    script += "end\n";

    return script;
}

QString script_contour_plot(
    int delta,
    float tolerance,
    int max_iteration,
    int stat1,
    int stat2,
    int stat3
) {
    const char* stat_name[] = { "crit", "haste", "mastery", "vers" };
    const QString stat_name_tr[] = {
        QApplication::translate( "gicClass", "Crit" ),
        QApplication::translate( "gicClass", "Haste" ),
        QApplication::translate( "gicClass", "Mastery" ),
        QApplication::translate( "gicClass", "Versatility" )
    };
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += QString( "CreateContourChart(\"" ) + stat_name_tr[stat1] + "\", \"" + stat_name_tr[stat2] + "\", \"DPS\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Create a contour chart to visualize the results." ) + "\n";
    script += "Silence(true)\n";
    script += "delta = ";
    script += QString( "" ).setNum( delta ) + "\n";
    script += "tolerance = ";
    script += QString( "" ).setNum( tolerance ) + "\n";
    script += "max_iteration = ";
    script += QString( "" ).setNum( max_iteration ) + "\n";
    script += QString( "stat1 = GetParam(\"gear_" ) + stat_name[stat1] + "\")\n";
    script += QString( "stat2 = GetParam(\"gear_" ) + stat_name[stat2] + "\")\n";
    script += QString( "stat3 = GetParam(\"gear_" ) + stat_name[stat3] + "\")\n";
    script += "amount = stat1 + stat2 + stat3\n";
    script += "function RunPlot(s1,s2,s3,e,m)\n";
    script += QString( "  SetParam(\"gear_" ) + stat_name[stat1] + "\", s1)\n";
    script += QString( "  SetParam(\"gear_" ) + stat_name[stat2] + "\", s2)\n";
    script += QString( "  SetParam(\"gear_" ) + stat_name[stat3] + "\", s3)\n";
    script += "  local error = e + 1\n";
    script += "  local iter = 0\n";
    script += "  local dps = 0\n";
    script += "  while error > e and iter < m do\n";
    script += "    local more_iter = math.min(1000 + math.floor(iter * error * error / e / e), m - iter, 100000)\n";
    script += "    SetParam(\"iterations\", more_iter)\n";
    script += "    local more_dps, _, more_error = Run()\n";
    script += "    dps = (dps * iter + more_dps * more_iter) / (iter + more_iter)\n";
    script += "    error = math.sqrt((error * error * iter * iter + more_error * more_error * more_iter * more_iter))\n";
    script += "            / (iter + more_iter)\n";
    script += "    iter = iter + more_iter\n";
    script += "  end\n";
    script += "  return dps, error\n";
    script += "end\n";
    script += "io.output(\"contour_plot.sci\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Output to SciLab script file." ) + "\n";
    script += "io.write(\"raw=[\")\n";
    script += QString( "print(\"" ) + stat_name[stat1] + "\", \"" + stat_name[stat2] + "\", \"" + stat_name[stat3] + "\", \"dps\", \"error\")\n";
    script += "data_count = 0\n";
    script += "for stat1 = 0, amount, delta do\n";
    script += "  for stat2 = 0, amount, delta do\n";
    script += "    stat3 = amount - stat1 - stat2\n";
    script += "    if stat3 >= 0 then\n";
    script += "      dps, dpse = RunPlot(stat1, stat2, stat3, tolerance, max_iteration)\n";
    script += "      print(stat1,stat2,stat3,string.format(\"%.1f\",dps),string.format(\"%.3f\",dpse))\n";
    script += "      io.write(stat1..\", \"..stat2..\", \"..string.format(\"%.3f, %.3f\", dps, dpse)..\"\\n\")\n";
    script += "      data_count = data_count + 1\n";
    script += "      AddContourData(stat1, stat2, dps)\n";
    script += "    end\n";
    script += "  end\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "SciLab script file." ) + "\n";
    script += "io.write(\"];\\n\")\n";
    script += "io.write(string.format(\"for i=1:%d z(1+(raw(i,1)/%d),1+(raw(i,2)/%d))=raw(i,3); end\\n\", data_count, delta, delta))\n";
    script += "io.write(\"rawmin=raw(1,3);\\n\")\n";
    script += "io.write(\"rawmax=raw(1,3);\\n\")\n";
    script += "io.write(string.format(\"for i=1:%d if rawmin>raw(i,3) then rawmin=raw(i,3); end end\\n\", data_count))\n";
    script += "io.write(string.format(\"for i=1:%d if rawmax<raw(i,3) then rawmax=raw(i,3); end end\\n\", data_count))\n";
    script += "io.write(\"nz=linspace(rawmin,rawmax,30);\\n\")\n";
    script += QString( "io.write(string.format(\"%s=linspace(%d,%d,%d);\\n\", \"" ) + stat_name[stat1] + "\", 0, math.floor(amount / delta) * delta, math.floor(amount / delta) + 1))\n";
    script += QString( "io.write(string.format(\"%s=%s;\\n\", \"" ) + stat_name[stat2] + "\", \"" + stat_name[stat1] + "\"))\n";
    script += QString( "io.write(string.format(\"contourf(%s, %s, z, nz);\\n\", \"" ) + stat_name[stat1] + "\", \"" + stat_name[stat2] + "\"))\n";
    script += "io.write(\"f=gcf();\\n\")\n";
    script += "io.write(\"f.color_map=bonecolormap(30);\\n\")\n";
    script += QString( "io.write(\"xlabel(\\\"" ) + stat_name[stat1] + "\\\");\\n\")\n";
    script += QString( "io.write(\"ylabel(\\\"" ) + stat_name[stat2] + "\\\");\\n\")\n";
    script += "io.write(\"axc=gca();\\n\")\n";
    script += "io.write(\"axc.auto_ticks=\\\"on\\\";\\n\")\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Contour Plot Finished. You could run \\\"contour_plot.sci\\\" with SciLab (http://scilab.org/) to draw a figure." ) + "\")\n";
    script += "FinishContourChart()\n";

    return script;
}