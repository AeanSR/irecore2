/*
    Copyright (C) 2015-2016 Aean(a.k.a. fhsvengetta)
    All rights reserved.

    IreCore is distributed under the terms of The MIT License.
    You should have received a copy of the MIT License along with this program.
    If not, see <http://opensource.org/licenses/mit-license.php>.
    */

#include "gic.h"

QString script_plain(){
    QString script;
    script += QString("-- ") + QApplication::translate("script", "This script is generated by IreCore.") + "\n";
    script += QString("-- ") + QApplication::translate("script", "If we don't set silence mode, IreCore will output to the result tab.") + "\n";
    script += QString("-- ") + QApplication::translate("script", "Just run.") + "\n";
    script += "Run()";
    return script;
}

QString script_scale_factor(
    int scale_delta,
    bool center_scale_delta,
    int scale_stat_mask,
    bool scale_mh,
    bool scale_oh
){
    QString script;
    script += QString("-- ") + QApplication::translate("script", "This script is generated by IreCore.") + "\n";
    script += "delta = ";
    script += QString("").setNum(scale_delta) + "\n";
    script += "stats_key = { ";
    for(int i = 0; i < 6; i++){
        const QString stats_key[] = { "gear_str", "gear_crit", "gear_haste", "gear_mastery", "gear_mult", "gear_vers" };
        if(scale_stat_mask & (1<<i)) script += QString("\"") + stats_key[i] + "\", ";
    }
    script += " }\n";
    script += "stats_name= { ";
    for(int i = 0; i < 6; i++){
        const QString stats_name[] = {
            QApplication::translate("gicClass", "Strength"),
            QApplication::translate("gicClass", "Crit Rating"),
            QApplication::translate("gicClass", "Haste Rating"),
            QApplication::translate("gicClass", "Mastery Rating"),
            QApplication::translate("gicClass", "Multistrike Rating"),
            QApplication::translate("gicClass", "Versatility Rating")
        };
        if(scale_stat_mask & (1<<i)) script += QString("\"") + stats_name[i] + "\", ";
    }
    script += " }\n";
    script += "outstr = \"\"\n";
    if(!center_scale_delta) script += "ldps, _, ldpse = Run()\n";
    script += "for i, k in ipairs(stats_key) do\n";
    script += "  value = GetParam(k)\n";
    if(center_scale_delta) script += "  valuel = math.max(0,value - 0.5*delta)\n";
    if(center_scale_delta) script += "  valuer = valuel + delta\n";
    if(!center_scale_delta) script += "  valuer = value + delta\n";
    if(center_scale_delta) script += "  SetParam(k,valuel)\n";
    if(center_scale_delta) script += "  ldps, _, ldpse = Run()\n";
    script += "  SetParam(k,valuer)\n";
    script += "  rdps, _, rdpse = Run()\n";
    script += "  SetParam(k,value)\n";
    script += "  sf = (rdps - ldps) / delta\n";
    script += "  sfe = math.sqrt((ldpse * ldpse + rdpse * rdpse) / delta) \n";
    script += "  outstr = outstr..stats_name[i]..\": \"..string.format(\"%.3f\", sf)\n";
    script += "  outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    script += "end\n";
    if(scale_mh){
        script += "-- " + QApplication::translate("script", "Scale for MH Weapon DPS.") + "\n";
        script += "mhlow = GetParam(\"mh_low\")\n";
        script += "mhhigh = GetParam(\"mh_high\")\n";
        script += "mhspeed = GetParam(\"mh_speed\")\n";
        script += "if mhspeed <= 0 then mhspeed = 1.5 end -- ";
        script += QApplication::translate("script", "If speed is not set IreCore will default it to 1.5") + "\n";
        if(center_scale_delta){
            script += "mhlowl = math.max(0, mhlow - mhspeed * delta * 0.5)\n";
            script += "mhhighl = math.max(0, mhhigh - mhspeed * delta * 0.5)\n";
            script += "SetParam(\"mh_low\", mhlowl)\n";
            script += "SetParam(\"mh_high\", mhhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"mh_low\", mhlowl + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhighl + mhspeed * delta)\n";
        }else{
            script += "SetParam(\"mh_low\", mhlow + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhigh + mhspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"mh_low\", mhlow)\n";
        script += "SetParam(\"mh_high\", mhhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt((ldpse * ldpse + rdpse * rdpse) / delta) \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate("script", "Main Hand DPS");
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    }
    if(scale_oh){
        script += "-- " + QApplication::translate("script", "Scale for OH Weapon DPS.") + "\n";
        script += "ohlow = GetParam(\"oh_low\")\n";
        script += "ohhigh = GetParam(\"oh_high\")\n";
        script += "ohspeed = GetParam(\"oh_speed\")\n";
        script += "if ohspeed <= 0 then ohspeed = 1.5 end -- ";
        script += QApplication::translate("script", "If speed is not set IreCore will default it to 1.5") + "\n";
        if(center_scale_delta){
            script += "ohlowl = math.max(0, ohlow - ohspeed * delta * 0.5)\n";
            script += "ohhighl = math.max(0, ohhigh - ohspeed * delta * 0.5)\n";
            script += "SetParam(\"oh_low\", ohlowl)\n";
            script += "SetParam(\"oh_high\", ohhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"oh_low\", ohlowl + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhighl + ohspeed * delta)\n";
        }else{
            script += "SetParam(\"oh_low\", ohlow + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhigh + ohspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"oh_low\", ohlow)\n";
        script += "SetParam(\"oh_high\", ohhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt((ldpse * ldpse + rdpse * rdpse) / delta) \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate("script", "Off Hand DPS");
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    }
    script += "print(\"";
    script += QApplication::translate("script", "Scale Factors");
    script += "\")";
    script += "print(outstr)\n";
    return script;
}