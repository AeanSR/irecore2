/*
    Copyright (C) 2015-2016 Aean(a.k.a. fhsvengetta)
    All rights reserved.

    IreCore is distributed under the terms of The MIT License.
    You should have received a copy of the MIT License along with this program.
    If not, see <http://opensource.org/licenses/mit-license.php>.
*/

#include "gic.h"

QString script_plain() {
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += QString( "-- " ) + QApplication::translate( "script", "If we don't set silence mode, IreCore will output to the result tab." ) + "\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Just run." ) + "\n";
    script += "Run()";
    return script;
}

QString script_scale_factor(
    int scale_delta,
    bool center_scale_delta,
    int scale_stat_mask,
    bool scale_mh,
    bool scale_oh
) {
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += "CreateBarChart() ";
    script += QString( "-- " ) + QApplication::translate( "script", "Create a bar chart to visualize the results." ) + "\n";
    script += "delta = ";
    script += QString( "" ).setNum( scale_delta ) + "\n";
    script += "stats_key = { ";
    for (int i = 0; i < 5; i++) {
        const QString stats_key[] = { "gear_str", "gear_crit", "gear_haste", "gear_mastery", "gear_vers" };
        if (scale_stat_mask & ( 1 << i )) script += QString( "\"" ) + stats_key[i] + "\", ";
    }
    script += " }\n";
    script += "stats_name= { ";
    for (int i = 0; i < 5; i++) {
        const QString stats_name[] = {
            QApplication::translate( "gicClass", "Strength" ),
            QApplication::translate( "gicClass", "Crit Rating" ),
            QApplication::translate( "gicClass", "Haste Rating" ),
            QApplication::translate( "gicClass", "Mastery Rating" ),
            QApplication::translate( "gicClass", "Versatility Rating" )
        };
        if (scale_stat_mask & ( 1 << i )) script += QString( "\"" ) + stats_name[i] + "\", ";
    }
    script += " }\n";
    script += "outstr = \"\"\n";
    if (!center_scale_delta) script += "ldps, _, ldpse = Run()\n";
    script += "for i, k in ipairs(stats_key) do\n";
    script += "  value = GetParam(k)\n";
    if (center_scale_delta) script += "  valuel = math.max(0,value - 0.5*delta)\n";
    if (center_scale_delta) script += "  valuer = valuel + delta\n";
    if (!center_scale_delta) script += "  valuer = value + delta\n";
    if (center_scale_delta) script += "  SetParam(k,valuel)\n";
    if (center_scale_delta) script += "  ldps, _, ldpse = Run()\n";
    script += "  SetParam(k,valuer)\n";
    script += "  rdps, _, rdpse = Run()\n";
    script += "  SetParam(k,value)\n";
    script += "  sf = (rdps - ldps) / delta\n";
    script += "  sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse)  / delta\n";
    script += "  outstr = outstr..stats_name[i]..\": \"..string.format(\"%.3f\", sf)\n";
    script += "  outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
    script += "  AddBarData(stats_name[i], sf, sfe)\n";
    script += "end\n";
    if (scale_mh) {
        script += "-- " + QApplication::translate( "script", "Scale for MH Weapon DPS." ) + "\n";
        script += "mhlow = GetParam(\"mh_low\")\n";
        script += "mhhigh = GetParam(\"mh_high\")\n";
        script += "mhspeed = GetParam(\"mh_speed\")\n";
        script += "if mhspeed <= 0 then mhspeed = 1.5 end -- ";
        script += QApplication::translate( "script", "If speed is not set IreCore will default it to 1.5" ) + "\n";
        if (center_scale_delta) {
            script += "mhlowl = math.max(0, mhlow - mhspeed * delta * 0.5)\n";
            script += "mhhighl = math.max(0, mhhigh - mhspeed * delta * 0.5)\n";
            script += "SetParam(\"mh_low\", mhlowl)\n";
            script += "SetParam(\"mh_high\", mhhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"mh_low\", mhlowl + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhighl + mhspeed * delta)\n";
        } else {
            script += "SetParam(\"mh_low\", mhlow + mhspeed * delta)\n";
            script += "SetParam(\"mh_high\", mhhigh + mhspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"mh_low\", mhlow)\n";
        script += "SetParam(\"mh_high\", mhhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse) / delta \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate( "script", "Main Hand DPS" );
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
        script += QString( "AddBarData(\"" ) + QApplication::translate( "script", "Main Hand DPS" ) + "\", sf, sfe)\n";
    }
    if (scale_oh) {
        script += "-- " + QApplication::translate( "script", "Scale for OH Weapon DPS." ) + "\n";
        script += "ohlow = GetParam(\"oh_low\")\n";
        script += "ohhigh = GetParam(\"oh_high\")\n";
        script += "ohspeed = GetParam(\"oh_speed\")\n";
        script += "if ohspeed <= 0 then ohspeed = 1.5 end -- ";
        script += QApplication::translate( "script", "If speed is not set IreCore will default it to 1.5" ) + "\n";
        if (center_scale_delta) {
            script += "ohlowl = math.max(0, ohlow - ohspeed * delta * 0.5)\n";
            script += "ohhighl = math.max(0, ohhigh - ohspeed * delta * 0.5)\n";
            script += "SetParam(\"oh_low\", ohlowl)\n";
            script += "SetParam(\"oh_high\", ohhighl)\n";
            script += "ldps, _, ldpse = Run()\n";
            script += "SetParam(\"oh_low\", ohlowl + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhighl + ohspeed * delta)\n";
        } else {
            script += "SetParam(\"oh_low\", ohlow + ohspeed * delta)\n";
            script += "SetParam(\"oh_high\", ohhigh + ohspeed * delta)\n";
        }
        script += "rdps, _, rdpse = Run()\n";
        script += "SetParam(\"oh_low\", ohlow)\n";
        script += "SetParam(\"oh_high\", ohhigh)\n";
        script += "sf = (rdps - ldps) / delta\n";
        script += "sfe = math.sqrt(ldpse * ldpse + rdpse * rdpse) / delta \n";
        script += "outstr = outstr..\"";
        script += QApplication::translate( "script", "Off Hand DPS" );
        script += "\"..\": \"..string.format(\"%.3f\", sf)\n";
        script += "outstr = outstr..\"(+/-\"..string.format(\"%.3f\", sfe)..\")\\n\"\n";
        script += QString( "AddBarData(\"" ) + QApplication::translate( "script", "Off Hand DPS" ) + "\", sf, sfe)\n";
    }
    script += "print(\"";
    script += QApplication::translate( "script", "Scale Factors" );
    script += "\")\n";
    script += "print(outstr)\n";
    script += "FinishBarChart()\n";
    return script;
}

QString script_trinket_ladder(
    int trinket_slot_str,
    int trinket_slot_crit,
    int trinket_slot_haste,
    int trinket_slot_mastery,
    int trinket_slot_vers
) {
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += "CreateBarChart() ";
    script += QString( "-- " ) + QApplication::translate( "script", "Create a bar chart to visualize the results." ) + "\n";
    script += "Silence(true)\n";
    script += QString( "-- " ) + QApplication::translate( "script", "First, deduct trinket permanent stats. (Did you set them correctly in the paperdoll?)" ) + "\n";
    script += QString( "SetParam(\"gear_str-\", " ) + QString().setNum( trinket_slot_str ) + ")\n";
    script += QString( "SetParam(\"gear_crit-\", " ) + QString().setNum( trinket_slot_crit ) + ")\n";
    script += QString( "SetParam(\"gear_haste-\", " ) + QString().setNum( trinket_slot_haste ) + ")\n";
    script += QString( "SetParam(\"gear_mastery-\", " ) + QString().setNum( trinket_slot_mastery ) + ")\n";
    script += QString( "SetParam(\"gear_vers-\", " ) + QString().setNum( trinket_slot_vers ) + ")\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Forbid trinket specials." ) + "\n";
    script += "SetParam(\"trinket1\", \"none\")\n";
    script += "SetParam(\"trinket2\", \"none\")\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Run for benchmark." ) + "\n";
    script += "benchmark, _, bme = Run()\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Benchmark: " ) + "\"..string.format(\"%.3f\", benchmark))\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Trinket list." ) + "\n";
    script += "trinkets = {\n";
    for (auto i = trinket_ladder().begin(); i != trinket_ladder().end(); i++) {
        if (i->not_selected) continue;
        script += QString( "  { name=\"" ) + i->name + QString().sprintf( "\", effect=\"%s\", ilvl=\"%d\", upgrade=\"%d\", str=%d, crit=%d, haste=%d, mastery=%d, vers=%d, demonic=%d },\n"
            , trinket_list[trinket_from_id( i->itemid )], i->itemlvl, i->upgrade, i->str, i->crit, i->haste, i->mastery, i->vers, i->demonic );
    }
    script += "}\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Get and save some origin parameters." ) + "\n";
    script += "demon = GetParam(\"enemy_is_demonic\")\n";
    script += "base_str = GetParam(\"gear_str\")\n";
    script += "base_crit = GetParam(\"gear_crit\")\n";
    script += "base_haste = GetParam(\"gear_haste\")\n";
    script += "base_mastery = GetParam(\"gear_mastery\")\n";
    script += "base_vers = GetParam(\"gear_vers\")\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Start trinket evaluation." ) + "\n";
    script += "result = {}\n";
    script += "io.output(\"trinket_ladder.csv\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Output to CSV file so you could make charts easily." ) + "\n";
    script += "io.write(\"\\xEF\\xBB\\xBF\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Add UTF-8 BOM may let Excel 2007+ recognize Unicode characters." ) + "\n";
    script += "for i,t in ipairs(trinkets) do\n";
    script += "  if t[\"demonic\"] == -1 then SetParam(\"enemy_is_demonic\", demon) else SetParam(\"enemy_is_demonic\", t[\"demonic\"]) end\n";
    script += "  SetParam(\"gear_str\", base_str + t[\"str\"])\n";
    script += "  SetParam(\"gear_crit\", base_crit + t[\"crit\"])\n";
    script += "  SetParam(\"gear_haste\", base_haste + t[\"haste\"])\n";
    script += "  SetParam(\"gear_mastery\", base_mastery + t[\"mastery\"])\n";
    script += "  SetParam(\"gear_vers\", base_vers + t[\"vers\"])\n";
    script += "  SetParam(\"trinket1\", t[\"effect\"])\n";
    script += "  SetParam(\"trinket1_ilvl\", t[\"ilvl\"])\n";
    script += "  dps, _, dpse = Run()\n";
    script += "  dps = dps - benchmark\n";
    script += "  dpse = math.sqrt(dpse * dpse + bme * bme)\n";
    script += "  result[\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"]] = math.floor(dps + 0.5)\n";
    script += "  AddBarData(\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"], dps, dpse)\n";
    script += "  print(\"[\"..t[\"ilvl\"]..\"]\"..t[\"name\"]..\": \"..string.format(\"%.3f\", dps)..\"(+-\"..string.format(\"%.3f\", dpse)..\"), \"..i..\"/\"..#trinkets..\" complete\")\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Sort the result." ) + "\n";
    script += "function spairs(t, order)\n";
    script += "  local keys = {}\n";
    script += "  for k in pairs(t) do keys[#keys+1] = k end\n";
    script += "  table.sort(keys, function(a,b) return order(t, a, b) end)\n";
    script += "  local i = 0\n";
    script += "  return function()\n";
    script += "    i = i + 1\n";
    script += "    if keys[i] then return keys[i], t[keys[i]] end\n";
    script += "  end\n";
    script += "end\n";
    script += "print(\"";
    script += QApplication::translate( "script", "Trinket Ladder" );
    script += "\")\n";
    script += "for k,v in spairs(result, function(t,a,b) return t[b] < t[a] end) do\n";
    script += "  print(k..\": \"..v)\n";
    script += "  io.write(k..\", \"..v..\"\\n\")\n";
    script += "end\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Result saved as \\\"trinket_ladder.csv\\\"." ) + "\")\n";
    script += "FinishBarChart()\n";
    return script;
}

QString script_stat_maxima(
    float confidence,
    int delta,
    int min_delta,
    int max_iteration
) {
    QString script;

    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += "stats_name= { ";
    for (int i = 0; i < 4; i++) {
        const QString stats_name[] = {
            QApplication::translate( "gicClass", "Crit" ),
            QApplication::translate( "gicClass", "Haste" ),
            QApplication::translate( "gicClass", "Mastery" ),
            QApplication::translate( "gicClass", "Versatility" )
        };
        script += QString( "\"" ) + stats_name[i] + "\", ";
    }
    script += " }\n";
    script += "Silence(true)\n";
    script += QString( "confidence = " ) + QString().setNum( confidence ) + "\n";
    script += QString( "delta = " ) + QString().setNum( delta ) + "\n";
    script += QString( "min_delta = " ) + QString().setNum( min_delta ) + "\n";
    script += QString( "max_iteration = " ) + QString().setNum( max_iteration ) + "\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Simulation result is saved in hash table." ) + "\n";
    script += "giteration = {}\n";
    script += "gdps = {}\n";
    script += "gerror = {}\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Shallow copy function for array / simple table." ) + "\n";
    script += "function copy(orig)\n";
    script += "  local orig_type = type(orig)\n";
    script += "  local ntbl\n";
    script += "  if orig_type == 'table' then\n";
    script += "    ntbl = {}\n";
    script += "    for orig_key, orig_value in pairs(orig) do\n";
    script += "      ntbl[orig_key] = orig_value\n";
    script += "    end\n";
    script += "  else\n";
    script += "    ntbl = orig\n";
    script += "  end\n";
    script += "  return ntbl\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Key used in hash table." ) + "\n";
    script += "function Key(s)\n";
    script += "  return string.format(\"%d,%d,%d,%d\",s[1],s[2],s[3],s[4])\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Set stats into simulation." ) + "\n";
    script += "function SetStat(s)\n";
    script += "  SetParam(\"gear_crit\", s[1])\n";
    script += "  SetParam(\"gear_haste\", s[2])\n";
    script += "  SetParam(\"gear_mastery\", s[3])\n";
    script += "  SetParam(\"gear_vers\", s[4])\n";
    script += "  return\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Confident level to compare two points." ) + "\n";
    script += "function ConfLvl(s1,s2)\n";
    script += "  if not giteration[Key(s1)] or not giteration[Key(s2)] then\n";
    script += "    return 0\n";
    script += "  else\n";
    script += "    return DPSCompareConfidence(gdps[Key(s1)],gerror[Key(s1)],gdps[Key(s2)],gerror[Key(s2)])\n";
    script += "  end\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Repeat simulation until error is lesser than given target." ) + "\n";
    script += "function RunTargetError(s,e,m)\n";
    script += "  SetStat(s)\n";
    script += "  local error = gerror[Key(s)] or (e + 1)\n";
    script += "  local iter = giteration[Key(s)] or 0\n";
    script += "  local dps = gdps[Key(s)] or 0\n";
    script += "  while error > e and iter < m do\n";
    script += "    local more_iter = math.min(1000 + math.floor(iter * error * error / e / e), m - iter, 100000)\n";
    script += "    SetParam(\"iterations\", more_iter)\n";
    script += "    local more_dps, _, more_error = Run()\n";
    script += "    dps = (dps * iter + more_dps * more_iter) / (iter + more_iter)\n";
    script += "    error = math.sqrt((error * error * iter * iter + more_error * more_error * more_iter * more_iter))\n";
    script += "            / (iter + more_iter)\n";
    script += "    iter = iter + more_iter\n";
    script += "  end\n";
    script += "  gdps[Key(s)] = dps\n";
    script += "  giteration[Key(s)] = iter\n";
    script += "  gerror[Key(s)] = error\n";
    script += "  return dps, error\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "Start from current stats." ) + "\n";
    script += "os = {\n";
    script += "  GetParam(\"gear_crit\"),\n";
    script += "  GetParam(\"gear_haste\"),\n";
    script += "  GetParam(\"gear_mastery\"),\n";
    script += "  GetParam(\"gear_vers\")\n";
    script += "}\n";
    script += "RunTargetError(os,1,1000)\n";
    script += QString( "-- " ) + QApplication::translate( "script", "If delta reached min_delta, stop climbing." ) + "\n";
    script += "while delta >= min_delta do\n";
    script += "  found = false\n";
    script += "  reserved = false\n";
    script += "  rs = copy(os) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Reserved point." ) + "\n";
    script += "  ns = copy(os) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Testing point." ) + "\n";
    script += "  repeat ";
    script += QString( "-- " ) + QApplication::translate( "script", "While better points could be found." ) + "\n";
    script += "    found = false\n";
    script += "    reserved = false\n";
    script += "    for i=0,4*4-1 do ";
    script += QString( "-- " ) + QApplication::translate( "script", "For each direction." ) + "\n";
    script += "      dec = math.floor(i / 4)\n";
    script += "      inc = i - dec * 4\n";
    script += "      dec, inc = dec + 1, inc + 1\n";
    script += "      if os[dec] >= delta and dec ~= inc then\n";
    script += "        ns = copy(os) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Move test point towards that." ) + "\n";
    script += "        ns[dec] = ns[dec] - delta\n";
    script += "        ns[inc] = ns[inc] + delta\n";
    script += "        if not giteration[Key(ns)] then ";
    script += QString( "-- " ) + QApplication::translate( "script", "Only test untouched points." ) + "\n";
    script += "          print(string.format(\"test +%d%s -%d%s\",delta,stats_name[inc],delta,stats_name[dec]))\n";
    script += "          RunTargetError(ns,1,1000)\n";
    script += "          while ConfLvl(os,ns) < confidence do ";
    script += QString( "-- " ) + QApplication::translate( "script", "Until confidence suffices." ) + "\n";
    script += "            RunTargetError(ns,gerror[Key(ns)]*0.9,max_iteration)\n";
    script += "            print(string.format(\"  dps %.1f %.1f, error %.3f %.3f, conf %.3f\",\n";
    script += "                         gdps[Key(os)],gdps[Key(ns)],gerror[Key(os)],gerror[Key(ns)],ConfLvl(os,ns)))\n";
    script += "            RunTargetError(os,gerror[Key(os)]*0.9,max_iteration)\n";
    script += "            print(string.format(\"  dps %.1f %.1f, error %.3f %.3f, conf %.3f\",\n";
    script += "                         gdps[Key(os)],gdps[Key(ns)],gerror[Key(os)],gerror[Key(ns)],ConfLvl(os,ns)))\n";
    script += QString( "            -- " ) + QApplication::translate( "script", "If both point reached its iteration limit." ) + "\n";
    script += "            if giteration[Key(ns)] >= max_iteration and giteration[Key(os)] >= max_iteration then\n";
    script += "              if gdps[Key(ns)] > gdps[Key(os)] and not reserved then\n";
    script += QString( "                -- " ) + QApplication::translate( "script", "Trust the result as is." ) + "\n";
    script += "                reserved = true\n";
    script += "                rs = copy(ns)\n";
    script += "                print(\"  test iteration exceeded. reserved.\")\n";
    script += "                break\n";
    script += "              else\n";
    script += "                print(\"  test iteration exceeded. not reserved.\")\n";
    script += "                break\n";
    script += "              end\n";
    script += "            end\n";
    script += "          end\n";
    script += QString( "          -- " ) + QApplication::translate( "script", "Now we have sufficient confidence to compare." ) + "\n";
    script += "          if gdps[Key(ns)] > gdps[Key(os)] and ConfLvl(os,ns) >= confidence then\n";
    script += "            found = true\n";
    script += "            os = copy(ns) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Move to higher point." ) + "\n";
    script += "            print(string.format(\"go +%s -%s to (%s) dps %.1f\",\n";
    script += "                         stats_name[inc],stats_name[dec],Key(ns),gdps[Key(ns)]))\n";
    script += "            break\n";
    script += "          end\n";
    script += "        end\n";
    script += "      end\n";
    script += "    end\n";
    script += "    if not found and reserved then ";
    script += QString( "-- " ) + QApplication::translate( "script", "Higher point found with lesser confidence." ) + "\n";
    script += "      found = true\n";
    script += "      os = copy(rs) ";
    script += QString( "-- " ) + QApplication::translate( "script", "Move to higher point regardless confidence." ) + "\n";
    script += "      print(string.format(\"go reserved, to (%s) dps %.1f\",Key(rs),gdps[Key(rs)]))\n";
    script += "    end\n";
    script += "  until not found\n";
    script += QString( "  -- " ) + QApplication::translate( "script", "No points found. We are at local maxima of current scale." ) + "\n";
    script += QString( "  -- " ) + QApplication::translate( "script", "Scale down, until min_delta reached." ) + "\n";
    script += "  if delta <= min_delta then\n";
    script += "    delta = min_delta - 1\n";
    script += "  else\n";
    script += "    delta = math.max(math.floor(delta * 0.618), min_delta)\n";
    script += "  end\n";
    script += "end\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Maxima confirmed. Gear value:" ) + "\")\n";
    script += "for i,v in ipairs(os) do\n";
    script += "  print(stats_name[i]..\": \"..string.format(\"%d\",v))\n";
    script += "end\n";

    return script;
}

QString script_contour_plot(
    int delta,
    float tolerance,
    int max_iteration,
    int stat1,
    int stat2,
    int stat3
) {
    const char* stat_name[] = { "crit", "haste", "mastery", "vers" };
    const QString stat_name_tr[] = {
        QApplication::translate( "gicClass", "Crit" ),
        QApplication::translate( "gicClass", "Haste" ),
        QApplication::translate( "gicClass", "Mastery" ),
        QApplication::translate( "gicClass", "Versatility" )
    };
    QString script;
    script += QString( "-- " ) + QApplication::translate( "script", "This script is generated by IreCore." ) + "\n";
    script += QString( "CreateContourChart(\"" ) + stat_name_tr[stat1] + "\", \"" + stat_name_tr[stat2] + "\", \"DPS\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Create a contour chart to visualize the results." ) + "\n";
    script += "Silence(true)\n";
    script += "delta = ";
    script += QString( "" ).setNum( delta ) + "\n";
    script += "tolerance = ";
    script += QString( "" ).setNum( tolerance ) + "\n";
    script += "max_iteration = ";
    script += QString( "" ).setNum( max_iteration ) + "\n";
    script += QString( "stat1 = GetParam(\"gear_" ) + stat_name[stat1] + "\")\n";
    script += QString( "stat2 = GetParam(\"gear_" ) + stat_name[stat2] + "\")\n";
    script += QString( "stat3 = GetParam(\"gear_" ) + stat_name[stat3] + "\")\n";
    script += "amount = stat1 + stat2 + stat3\n";
    script += "function RunPlot(s1,s2,s3,e,m)\n";
    script += QString( "  SetParam(\"gear_" ) + stat_name[stat1] + "\", s1)\n";
    script += QString( "  SetParam(\"gear_" ) + stat_name[stat2] + "\", s2)\n";
    script += QString( "  SetParam(\"gear_" ) + stat_name[stat3] + "\", s3)\n";
    script += "  local error = e + 1\n";
    script += "  local iter = 0\n";
    script += "  local dps = 0\n";
    script += "  while error > e and iter < m do\n";
    script += "    local more_iter = math.min(1000 + math.floor(iter * error * error / e / e), m - iter, 100000)\n";
    script += "    SetParam(\"iterations\", more_iter)\n";
    script += "    local more_dps, _, more_error = Run()\n";
    script += "    dps = (dps * iter + more_dps * more_iter) / (iter + more_iter)\n";
    script += "    error = math.sqrt((error * error * iter * iter + more_error * more_error * more_iter * more_iter))\n";
    script += "            / (iter + more_iter)\n";
    script += "    iter = iter + more_iter\n";
    script += "  end\n";
    script += "  return dps, error\n";
    script += "end\n";
    script += "io.output(\"contour_plot.sci\") ";
    script += QString( "-- " ) + QApplication::translate( "script", "Output to SciLab script file." ) + "\n";
    script += "io.write(\"raw=[\")\n";
    script += QString( "print(\"" ) + stat_name[stat1] + "\", \"" + stat_name[stat2] + "\", \"" + stat_name[stat3] + "\", \"dps\", \"error\")\n";
    script += "data_count = 0\n";
    script += "for stat1 = 0, amount, delta do\n";
    script += "  for stat2 = 0, amount, delta do\n";
    script += "    stat3 = amount - stat1 - stat2\n";
    script += "    if stat3 >= 0 then\n";
    script += "      dps, dpse = RunPlot(stat1, stat2, stat3, tolerance, max_iteration)\n";
    script += "      print(stat1,stat2,stat3,string.format(\"%.1f\",dps),string.format(\"%.3f\",dpse))\n";
    script += "      io.write(stat1..\", \"..stat2..\", \"..string.format(\"%.3f, %.3f\", dps, dpse)..\"\\n\")\n";
    script += "      data_count = data_count + 1\n";
    script += "      AddContourData(stat1, stat2, dps)\n";
    script += "    end\n";
    script += "  end\n";
    script += "end\n";
    script += QString( "-- " ) + QApplication::translate( "script", "SciLab script file." ) + "\n";
    script += "io.write(\"];\\n\")\n";
    script += "io.write(string.format(\"for i=1:%d z(1+(raw(i,1)/%d),1+(raw(i,2)/%d))=raw(i,3); end\\n\", data_count, delta, delta))\n";
    script += "io.write(\"rawmin=raw(1,3);\\n\")\n";
    script += "io.write(\"rawmax=raw(1,3);\\n\")\n";
    script += "io.write(string.format(\"for i=1:%d if rawmin>raw(i,3) then rawmin=raw(i,3); end end\\n\", data_count))\n";
    script += "io.write(string.format(\"for i=1:%d if rawmax<raw(i,3) then rawmax=raw(i,3); end end\\n\", data_count))\n";
    script += "io.write(\"nz=linspace(rawmin,rawmax,30);\\n\")\n";
    script += QString( "io.write(string.format(\"%s=linspace(%d,%d,%d);\\n\", \"" ) + stat_name[stat1] + "\", 0, math.floor(amount / delta) * delta, math.floor(amount / delta) + 1))\n";
    script += QString( "io.write(string.format(\"%s=%s;\\n\", \"" ) + stat_name[stat2] + "\", \"" + stat_name[stat1] + "\"))\n";
    script += QString( "io.write(string.format(\"contourf(%s, %s, z, nz);\\n\", \"" ) + stat_name[stat1] + "\", \"" + stat_name[stat2] + "\"))\n";
    script += "io.write(\"f=gcf();\\n\")\n";
    script += "io.write(\"f.color_map=bonecolormap(30);\\n\")\n";
    script += QString( "io.write(\"xlabel(\\\"" ) + stat_name[stat1] + "\\\");\\n\")\n";
    script += QString( "io.write(\"ylabel(\\\"" ) + stat_name[stat2] + "\\\");\\n\")\n";
    script += "io.write(\"axc=gca();\\n\")\n";
    script += "io.write(\"axc.auto_ticks=\\\"on\\\";\\n\")\n";
    script += QString( "print(\"" ) + QApplication::translate( "script", "Contour Plot Finished. You could run \\\"contour_plot.sci\\\" with SciLab (http://scilab.org/) to draw a figure." ) + "\")\n";
    script += "FinishContourChart()\n";

    return script;
}

#define TEST_PARAM(key,value) (0 == strcmp(ic_getparam(key), value))
const int base10[] = { 1000000, 100000, 10000, 1000, 100, 10, 1 };
#define TALENT_TIER(tier) ((talent / base10[tier - 1]) % 10)
QString script_aplga_actions_warrior(
    int use_cooldowns,
    int use_talents,
    int use_items
) {
    QString script;
    int talent = atoi( ic_getparam( "talent" ) );
    if (use_cooldowns) script += "\"SPELL(battle_cry)\",\n";
    if (TEST_PARAM( "spec", "fury" )) if (use_talents) if (TALENT_TIER( 3 ) == 2) script += "\"SPELL(berserker_rage)\",\n";
    script += "\"SPELL(heroic_leap)\",\n";
    if (use_cooldowns) if (use_talents) if (TALENT_TIER( 3 ) == 3) script += "\"SPELL(avatar)\",\n";
    if (use_cooldowns) if (use_items) if (!TEST_PARAM( "raidbuff_potion", "0" )) script += "\"SPELL(potion)\",\n";
    if (use_talents) if (TALENT_TIER( 2 ) == 2) script += "\"SPELL(storm_bolt)\",\n";
    if (use_talents) if (TALENT_TIER( 2 ) == 1) script += "\"SPELL(shockwave)\",\n";
    if (use_cooldowns) if (TEST_PARAM( "spec", "fury" ) && use_talents && TALENT_TIER( 7 ) == 1 || TEST_PARAM( "spec", "arms" )) script += "\"SPELL(bladestorm)\",\n";
    if (use_cooldowns) if (TEST_PARAM( "spec", "fury" )) if (use_talents) if (TALENT_TIER( 6 ) == 1) script += "\"SPELL(bloodbath)\",\n";
    if (use_cooldowns) if (use_items) if (atoi( ic_getparam( "legendary_ring" ) )) script += "\"SPELL(thorasus_the_stone_heart_of_draenor)\",\n";
    if (use_cooldowns) if (TEST_PARAM( "race", "bloodelf" )) script += "\"SPELL(arcane_torrent)\",\n";
    if (use_cooldowns) if (TEST_PARAM( "race", "orc" )) script += "\"SPELL(blood_fury)\",\n";
    if (use_cooldowns) if (TEST_PARAM( "race", "troll" )) script += "\"SPELL(berserking)\",\n";
    if (use_cooldowns) if (use_items) if (TEST_PARAM( "trinket1", "vial_of_convulsive_shadows" ) || TEST_PARAM( "trinket2", "vial_of_convulsive_shadows" )) script += "\"SPELL(vial_of_convulsive_shadows)\",\n";
    if (use_cooldowns) if (use_items) if (TEST_PARAM( "trinket1", "scabbard_of_kyanos" ) || TEST_PARAM( "trinket1", "scabbard_of_kyanos" )) script += "\"SPELL(scabbard_of_kyanos)\",\n";
    if (use_cooldowns) if (use_items) if (TEST_PARAM( "trinket1", "bonemaws_big_toe" ) || TEST_PARAM( "trinket2", "bonemaws_big_toe" )) script += "\"SPELL(bonemaws_big_toe)\",\n";
    if (use_cooldowns) if (use_items) if (TEST_PARAM( "trinket1", "emberscale_talisman" ) || TEST_PARAM( "trinket2", "emberscale_talisman" )) script += "\"SPELL(emberscale_talisman)\",\n";
    if (use_cooldowns) if (use_items) if (TEST_PARAM( "trinket1", "badge_of_victory" ) || TEST_PARAM( "trinket2", "badge_of_victory" )) script += "\"SPELL(badge_of_victory)\",\n";
    script += "\"SPELL(execute)\",\n";
    script += "\"SPELL(whirlwind)\",\n";
    if (TEST_PARAM( "spec", "arms" )) script += "\"SPELL(cleave)\",\n";
    if (TEST_PARAM( "spec", "arms" )) script += "\"SPELL(colossus_smash)\",\n";
    if (TEST_PARAM( "spec", "arms" )) script += "\"SPELL(hamstring)\",\n";
    if (TEST_PARAM( "spec", "arms" )) script += "\"SPELL(mortal_strike)\",\n";
    if (TEST_PARAM( "spec", "arms" )) script += "\"SPELL(slam)\",\n";
    if (TEST_PARAM( "spec", "arms" )) if (use_talents) if (TALENT_TIER( 1 ) == 2) script += "\"SPELL(overpower)\",\n";
    if (TEST_PARAM( "spec", "arms" )) if (use_talents) if (TALENT_TIER( 3 ) == 2) script += "\"SPELL(rend)\",\n";
    if (TEST_PARAM( "spec", "arms" )) if (use_talents) if (TALENT_TIER( 5 ) == 3) script += "\"SPELL(focused_rage)\",\n";
    if (TEST_PARAM( "spec", "arms" )) if (use_cooldowns) if (use_talents) if (TALENT_TIER( 7 ) == 3) script += "\"SPELL(ravager)\",\n";
    if (TEST_PARAM( "spec", "fury" )) script += "\"SPELL(bloodthirst)\",\n";
    if (TEST_PARAM( "spec", "fury" )) script += "\"SPELL(furious_slash)\",\n";
    if (TEST_PARAM( "spec", "fury" )) script += "\"SPELL(raging_blow)\",\n";
    if (TEST_PARAM( "spec", "fury" )) script += "\"SPELL(rampage)\",\n";
    if (TEST_PARAM( "spec", "fury" )) if (use_talents) if (TALENT_TIER( 7 ) == 3) script += "\"SPELL(dragon_roar)\",\n";
    return script;
}
QString script_aplga_conditions_warrior(
    int use_cooldowns,
    int use_talents,
    int use_items
) {
    QString script;
    int talent = atoi( ic_getparam( "talent" ) );
    script += "\"enemy_health_percent(rti)<=20\",\n";
    if (TEST_PARAM( "spec", "fury" )) if (TALENT_TIER( 1 ) == 3) {
        script += "\"enemy_health_percent(rti)>=80\",\n";
    }
    script += "\"rti->player.power<20\",\n";
    script += "\"rti->player.power<40\",\n";
    script += "\"rti->player.power<60\",\n";
    script += "\"rti->player.power<80\",\n";
    script += "\"rti->player.power>power_max-10\",\n";
    if (TEST_PARAM( "spec", "fury" )) {
        script += "\"taste_for_blood_stack>=1\",\n";
        script += "\"taste_for_blood_stack>=2\",\n";
        script += "\"taste_for_blood_stack>=3\",\n";
        script += "\"taste_for_blood_stack>=4\",\n";
        script += "\"taste_for_blood_stack>=5\",\n";
        script += "\"taste_for_blood_stack>=6\",\n";
        script += "\"TO_SECONDS(REMAIN(taste_for_blood_expire))<3\",\n";
        script += "\"UP(enrage_expire)\",\n";
        script += "\"TO_SECONDS(REMAIN(enrage_expire))<3\",\n";
        if (use_talents) if (TALENT_TIER( 6 ) == 2) {
            script += "\"frenzy_stack>=1\",\n";
            script += "\"frenzy_stack>=2\",\n";
            script += "\"frenzy_stack>=3\",\n";
            script += "\"TO_SECONDS(REMAIN(frenzy_expire))<3\",\n";
        }
        script += "\"UP(meat_cleaver_expire)\",\n";
        script += "\"TO_SECONDS(REMAIN(meat_cleaver_expire))<3\",\n";
        if (TALENT_TIER( 3 ) == 1) {
            script += "\"UP(wrecking_ball_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(wrecking_ball_expire))<3\",\n";
        }
        if (TALENT_TIER( 5 ) == 1) {
            script += "\"UP(massacre_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(massacre_expire))<3\",\n";
        }
        if (TALENT_TIER( 5 ) == 2) {
            script += "\"UP(frothing_berserker_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(frothing_berserker_expire))<3\",\n";
        }
        if (use_cooldowns) if (use_talents) if (TALENT_TIER( 6 ) == 1) {
            script += "\"UP(bloodbath_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_expire))<1\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_expire))<3\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_expire))<6\",\n";
            script += "\"UP(bloodbath_cd)\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_cd))<5\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_cd))<10\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_cd))<20\",\n";
            script += "\"TO_SECONDS(REMAIN(bloodbath_cd))<25\",\n";
        }
        if (use_talents) if (TALENT_TIER( 7 ) == 3) {
            script += "\"UP(dragon_roar_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(dragon_roar_expire))<1\",\n";
            script += "\"TO_SECONDS(REMAIN(dragon_roar_expire))<3\",\n";
            script += "\"UP(dragon_roar_cd)\",\n";
            script += "\"TO_SECONDS(REMAIN(dragon_roar_cd))<2\",\n";
            script += "\"TO_SECONDS(REMAIN(dragon_roar_cd))<5\",\n";
            script += "\"TO_SECONDS(REMAIN(dragon_roar_cd))<10\",\n";
            script += "\"TO_SECONDS(REMAIN(dragon_roar_cd))<15\",\n";
        }
        script += "\"UP(bloodthirst_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(bloodthirst_cd))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(bloodthirst_cd))<2\",\n";
        script += "\"TO_SECONDS(REMAIN(bloodthirst_cd))<3\",\n";
        if (TALENT_TIER( 6 ) == 3) {
            script += "\"UP(raging_blow_cd)\",\n";
            script += "\"TO_SECONDS(REMAIN(raging_blow_cd))<1\",\n";
            script += "\"TO_SECONDS(REMAIN(raging_blow_cd))<2\",\n";
            script += "\"TO_SECONDS(REMAIN(raging_blow_cd))<3\",\n";
        }
        if (use_talents) if (TALENT_TIER( 3 ) == 2) {
            script += "\"UP(berserker_rage_cd)\",\n";
            script += "\"TO_SECONDS(REMAIN(berserker_rage_cd))<5\",\n";
            script += "\"TO_SECONDS(REMAIN(berserker_rage_cd))<15\",\n";
            script += "\"TO_SECONDS(REMAIN(berserker_rage_cd))<30\",\n";
            script += "\"TO_SECONDS(REMAIN(berserker_rage_cd))<50\",\n";
        }
    }
    if (TEST_PARAM( "spec", "arms" )) {
        if (use_talents) if (TALENT_TIER( 1 ) == 2) {
            script += "\"UP(overpower_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(overpower_expire))<3\",\n";
        }
        if (use_cooldowns) if (use_talents) if (TALENT_TIER( 7 ) == 3) {
            script += "\"UP(ravager_expire)\",\n";
            script += "\"TO_SECONDS(REMAIN(ravager_expire))<3\",\n";
            script += "\"UP(ravager_cd)\",\n";
            script += "\"TO_SECONDS(REMAIN(ravager_cd))<5\",\n";
            script += "\"TO_SECONDS(REMAIN(ravager_cd))<15\",\n";
            script += "\"TO_SECONDS(REMAIN(ravager_cd))<30\",\n";
            script += "\"TO_SECONDS(REMAIN(ravager_cd))<50\",\n";
        }
        if (use_talents) if (TALENT_TIER( 3 ) == 2) {
            script += "\"UP(rend_expire(rti->player.target))\",\n";
            script += "\"TO_SECONDS(REMAIN(rend_expire(rti->player.target)))<5\",\n";
        }
        script += "\"UP(cleave_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(cleave_cd))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(cleave_cd))<2\",\n";
        script += "\"TO_SECONDS(REMAIN(cleave_cd))<3\",\n";
        script += "\"UP(cleave_expire)\",\n";
        script += "\"TO_SECONDS(REMAIN(cleave_expire))<3\",\n";
        script += "\"cleave_stack>=1\",\n";
        script += "\"cleave_stack>=2\",\n";
        script += "\"cleave_stack>=3\",\n";
        script += "\"cleave_stack>=4\",\n";
        script += "\"cleave_stack>=5\",\n";
        script += "\"UP(colossus_smash_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_cd))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_cd))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_cd))<20\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_cd))<40\",\n";
        script += "\"UP(colossus_smash_expire(rti->player.target))\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_expire(rti->player.target)))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_expire(rti->player.target)))<2\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_expire(rti->player.target)))<4\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_expire(rti->player.target)))<6\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_expire(rti->player.target)))<10\",\n";
        script += "\"TO_SECONDS(REMAIN(colossus_smash_expire(rti->player.target)))<20\",\n";
        script += "\"mortal_strike_charge>=1\",\n";
        if (TALENT_TIER( 5 ) == 2) {
            script += "\"mortal_strike_charge>=2\",\n";
        }
        script += "\"TO_SECONDS(REMAIN(mortal_strike_cd))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(mortal_strike_cd))<2\",\n";
        script += "\"TO_SECONDS(REMAIN(mortal_strike_cd))<3\",\n";
        if (use_talents) if (TALENT_TIER( 5 ) == 3) {
            script += "\"focused_rage_stack>=1\",\n";
            script += "\"focused_rage_stack>=2\",\n";
            script += "\"focused_rage_stack>=3\",\n";
        }
    }
    if (use_cooldowns) if (use_items) if (!TEST_PARAM( "raidbuff_potion", "0" )) script += "\"UP(potion_expire)\",\n";
    if (use_cooldowns) if (!TEST_PARAM( "raidbuff_bloodlust", "0" )) script += "\"UP(bloodlust_expire)\",\n";
    script += "\"UP(heroic_leap_cd)\",\n";
    script += "\"TO_SECONDS(REMAIN(heroic_leap_cd))<5\",\n";
    script += "\"TO_SECONDS(REMAIN(heroic_leap_cd))<15\",\n";
    script += "\"TO_SECONDS(REMAIN(heroic_leap_cd))<25\",\n";
    script += "\"TO_SECONDS(REMAIN(heroic_leap_cd))<40\",\n";
    if (use_talents) if (TALENT_TIER( 2 ) == 1) {
        script += "\"UP(shockwave_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(shockwave_cd))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(shockwave_cd))<10\",\n";
        script += "\"TO_SECONDS(REMAIN(shockwave_cd))<20\",\n";
        script += "\"TO_SECONDS(REMAIN(shockwave_cd))<30\",\n";
    }
    if (use_talents) if (TALENT_TIER( 2 ) == 2) {
        script += "\"UP(stormbolt_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(stormbolt_cd))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(stormbolt_cd))<10\",\n";
        script += "\"TO_SECONDS(REMAIN(stormbolt_cd))<20\",\n";
        script += "\"TO_SECONDS(REMAIN(stormbolt_cd))<25\",\n";
    }
    if (use_cooldowns) {
        script += "\"UP(battle_cry_expire)\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_expire))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_expire))<2\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_expire))<3\",\n";
        script += "\"UP(battle_cry_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_cd))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_cd))<15\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_cd))<30\",\n";
        script += "\"TO_SECONDS(REMAIN(battle_cry_cd))<50\",\n";
    }
    if (use_cooldowns) if (use_talents) if (TALENT_TIER( 3 ) == 3) {
        script += "\"UP(avatar_expire)\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_expire))<1\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_expire))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_expire))<15\",\n";
        script += "\"UP(avatar_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_cd))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_cd))<20\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_cd))<60\",\n";
        script += "\"TO_SECONDS(REMAIN(avatar_cd))<80\",\n";
    }
    if (use_cooldowns) if (TEST_PARAM( "spec", "fury" ) && use_talents && TALENT_TIER( 7 ) == 1 || TEST_PARAM( "spec", "arms" )) {
        script += "\"UP(bladestorm_cd)\",\n";
        script += "\"TO_SECONDS(REMAIN(bladestorm_cd))<5\",\n";
        script += "\"TO_SECONDS(REMAIN(bladestorm_cd))<20\",\n";
        script += "\"TO_SECONDS(REMAIN(bladestorm_cd))<60\",\n";
        script += "\"TO_SECONDS(REMAIN(bladestorm_cd))<80\",\n";
    }
    return script;
}

QString script_aplga(
    int spec,
    int complexity,
    int use_cooldowns,
    int use_talents,
    int use_items
) {
    QString script;
    script = R"RAWSCRIPT(
Silence(true)
action_list = {
)RAWSCRIPT";
    switch (spec){
    case SPEC_ARMS_WARRIOR: case SPEC_FURY_WARRIOR:
        script += script_aplga_actions_warrior(use_cooldowns, use_talents, use_items);
        break;
    }
    script += R"RAWSCRIPT(
}
condition_list = {
)RAWSCRIPT";
    switch (spec){
    case SPEC_ARMS_WARRIOR: case SPEC_FURY_WARRIOR:
        script += script_aplga_conditions_warrior(use_cooldowns, use_talents, use_items);
        break;
    }
    script += R"RAWSCRIPT(
}
pool_size = 200
new_chiasma = 40
new_mutation = 20
new_double_mutation = 10
signature_test_iteration = 128
evaluation_iteration = 16384
complexity_soft_bound = )RAWSCRIPT";
    script += QString( "" ).setNum( complexity );
    script += R"RAWSCRIPT(
confidence = 0.95
error_tolerance = 1.0
function deepcopy(orig)
  local orig_type = type(orig)
  local copy
  if orig_type == 'table' then
    copy = {}
    for orig_key, orig_value in next, orig, nil do
      copy[deepcopy(orig_key)] = deepcopy(orig_value)
    end
    setmetatable(copy, deepcopy(getmetatable(orig)))
  else
    copy = orig
  end
  return copy
end
function new_condition()
  local cond = {}
  cond.type = "condition"
  cond.op = "leaf"
  cond.leaf = math.random(#condition_list)
  return cond
end
function new_action()
  local act = {}
  act.type = "action"
  act.action = math.random(#action_list)
  return act
end
function new_apl()
  local apl = {}
  apl.type = "apl"
  apl.list = {}
  apl.list[1] = new_action()
  if math.random() < 0.5 then apl.list[1].condition = new_condition() end
  apl.list[2] = new_action()
  if math.random() < 0.5 then apl.list[2].condition = new_condition() end
  apl.list[3] = new_action()
  if math.random() < 0.5 then apl.list[3].condition = new_condition() end
  apl.list[4] = new_action()
  if math.random() < 0.5 then apl.list[4].condition = new_condition() end
  return apl
end
function add_mutation(elem)
  if not elem.type == "condition" then return end
  if elem.op == "leaf" then
    new_left = deepcopy(elem)
    elem.left = new_left
    if math.random() < 0.333 then
      elem.op = "and"
      new_right = new_condition()
      elem.right = new_right
    elseif math.random() < 0.5 then
      elem.op = "or"
      new_right = new_condition()
      elem.right = new_right
    else
      elem.op = "not"
      elem.right = nil
    end
  elseif elem.op == "not" then
    if math.random() < 0.2 then
      new_left = deepcopy(elem)
      elem.left = new_left
      if math.random() < 0.5 then
        elem.op = "and"
        new_right = new_condition()
        elem.right = new_right
      else
        elem.op = "or"
        new_right = new_condition()
        elem.right = new_right
      end
    else
      add_mutation(elem.left)
    end
  else
    if math.random() < 0.2 then
      new_left = deepcopy(elem)
      elem.left = new_left
      if math.random() < 0.333 then
        elem.op = "and"
        new_right = new_condition()
        elem.right = new_right
      elseif math.random() < 0.5 then
        elem.op = "or"
        new_right = new_condition()
        elem.right = new_right
      else
        elem.op = "not"
        elem.right = nil
      end
    elseif math.random() < 0.5 then
      add_mutation(elem.left)
    else
      add_mutation(elem.right)
    end
  end
end
function delete_mutation(elem)
  if not elem.type == "condition" then return end
  if math.random() < 0.2 then
    child = {}
    if elem.right and math.random() < 0.5 then
      child = elem.right
    else
      child = elem.left
    end
    elem = deepcopy(child)
  elseif (not elem.left.op == "leaf") and (elem.right and not elem.right.op == "leaf") then
    if math.random() < 0.5 then
      delete_mutation(elem.left)
    else
      delete_mutation(elem.right)
    end
  elseif not elem.left.op == "leaf" then
    delete_mutation(elem.left)
  elseif elem.right and not elem.right.op == "leaf" then
    delete_mutation(elem.right)
  else
    child = {}
    if elem.right and math.random() < 0.5 then
      child = elem.right
    else
      child = elem.left
    end
    elem = deepcopy(child)
  end
end
function mutation(elem)
  if elem.type == "apl" then
    if math.random() < 0.333 then
      -- modify
      mutation(elem.list[math.random(#elem.list)])
    elseif #elem.list > 1 and math.random() < 0.5 then
      -- delete
      local delete_action = math.random(#elem.list)
      for i = delete_action, #elem.list - 1 do
        elem.list[i] = elem.list[i+1]
      end
      elem.list[#elem.list] = nil
    else
      -- add
      local add_action = math.random(#elem.list + 1)
      for i = #elem.list + 1, add_action, -1 do
        elem.list[i] = elem.list[i-1]
      end
      elem.list[add_action] = new_action()
    end
  elseif elem.type == "action" then
    if math.random() < 0.5 then
      -- condition
      if elem.condition and math.random() < 0.333 then
        mutation(elem.condition)
      elseif not elem.condition or math.random() < 0.5 then
        if elem.condition then
          add_mutation(elem.condition)
        else
          elem.condition = new_condition()
        end
      else
        if elem.condition.op == "leaf" or math.random() < 0.2 then
          elem.condition = nil
        else
          delete_mutation(elem.condition)
        end
      end
    else
      -- action
      local new_action = math.random(#action_list - 1)
      if new_action >= elem.action then new_action = new_action + 1 end
      elem.action = new_action
    end
  elseif elem.type == "condition" then
    if elem.op == "leaf" then
      local new_condition = math.random(#condition_list - 1)
      if new_condition >= elem.leaf then new_condition = new_condition + 1 end
      elem.leaf = new_condition
    elseif (elem.op == "and" or elem.op == "or") and math.random() < 0.2 then
      if elem.op == "and" then
        elem.op = "or"
      else
        elem.op = "and"
      end
    elseif elem.right and math.random() < 0.5 then
      mutation(elem.right)
    else
      mutation(elem.left)
    end
  end
end
function action_chiasma(elem1, elem2)
  if not elem1.type == "apl" or not elem2.type == "apl" then return end
  local bp1 = math.random(#elem1.list)
  local bp2 = math.random(#elem2.list)
  local temp1 = {}
  local temp2 = {}
  for i = bp1, #elem1.list do
    temp1[i] = deepcopy(elem1.list[i])
  end
  for i = bp2, #elem2.list do
    temp2[i] = deepcopy(elem2.list[i])
  end
  for i = 0, math.max(#elem2.list - bp2, #elem1.list - bp1) do
    elem1.list[i + bp1] = temp2[i + bp2]
    elem2.list[i + bp2] = temp1[i + bp1]
  end
end
function condition_chiasma(elem1, elem2)
  if not elem1.type == "condition" or not elem2.type == "condition" then return end
  local c = math.random()
  if elem1.left and c < 0.2 then
    condition_chiasma(elem1.left, elem2)
  elseif elem1.right and c < 0.4 then
    condition_chiasma(elem1.right, elem2)
  elseif elem2.left and c < 0.6 then
    condition_chiasma(elem1, elem2.left)
  elseif elem2.right and c < 0.8 then
    condition_chiasma(elem1, elem2.right)
  else
    local tmp = deepcopy(elem2)
    elem2 = deepcopy(elem1)
    elem1 = tmp
  end
end
function chiasma(elem1, elem2)
  if not elem1.type == "apl" or not elem2.type == "apl" then return end
  if math.random() < 0.3 then
    action_chiasma(elem1, elem2)
  else
    local cp1, cp2
    cp1 = math.random(#elem1.list)
    cp2 = math.random(#elem2.list)
    if elem1.list[cp1].condition and elem2.list[cp2].condition then
      condition_chiasma(elem1.list[cp1].condition, elem2.list[cp2].condition)
    else
      action_chiasma(elem1, elem2)
    end
  end
end
function complexity(elem)
  local c = 1
  if elem.type == "apl" then
    for i,v in ipairs(elem.list) do
      c = c + complexity(v)
    end
  elseif elem.type == "action" then
    if elem.condition then
      c = c + complexity(elem.condition)
    end
  elseif elem.type == "condition" then
    if elem.left then
      c = c + complexity(elem.left)
    end
    if elem.right then
      c = c + complexity(elem.right)
    end
  end
  return c
end
function dump(elem)
  local c = ""
  if elem.type == "apl" then
    for i,v in ipairs(elem.list) do
      c = c .. "/*" .. i .. "*/" .. dump(v) .. "\n"
    end
  elseif elem.type == "action" then
    if elem.condition then
      c = c .. "if(" .. dump(elem.condition) .. ")" .. action_list[elem.action] .. ";"
    else
      c = c .. action_list[elem.action] .. ";"
    end
  elseif elem.type == "condition" then
    if elem.op == "leaf" then
      c = c .. condition_list[elem.leaf]
    elseif elem.op == "and" then
      c = c .. "(" .. dump(elem.left) .. "&&" .. dump(elem.right) .. ")"
    elseif elem.op == "or" then
      c = c .. "(" .. dump(elem.left) .. "||" .. dump(elem.right) .. ")"
    elseif elem.op == "not" then
      c = c .. "!" .. dump(elem.left)
    end
  end
  return c
end
transpose = {}
function calc_fitness(item)
  local rev = 1.0 / ( 1.0 + math.exp( 2 * ( complexity(item.apl) - complexity_soft_bound ) ) )
  item.fitness = item.dps * rev
  item.fitness_error = item.dpse * rev
end
function eval(item)
  item.iteration = item.iteration or 0
  item.dps = item.dps or 0
  item.dpse = item.dpse or 0
  local apl = dump(item.apl)
  local sigcomp = complexity(item.apl)
  SetParam("actions", apl)
  if not item.signature then
    SetParam("iterations", signature_test_iteration)
    SetParam("deterministic_seed", 4262)
    local sigdps, _, sigdpse = Run()
    item.signature = GetLastSignature()
    if transpose[item.signature] and transpose[item.signature] <= sigcomp then
      item.dps = -1
      item.fitness = -1
      item.fitness_error = 0
      print("apl("..item.signature.."): bad.")
      return
    end
    transpose[item.signature] = sigcomp
    item.dps = sigdps
    item.error = sigdpse
    item.iteration = signature_test_iteration
    print("apl("..item.signature.."): good, dps~"..string.format("%.3f",sigdps))
  end
  local iter = evaluation_iteration
  SetParam("iterations", iter)
  SetParam("deterministic_seed", 0)
  local dps, _, dpse = Run()
  item.dps = (item.dps * item.iteration + dps * iter) / (item.iteration + iter)
  item.dpse = math.sqrt((item.dpse * item.dpse * item.iteration * item.iteration
                         + dpse * dpse * iter * iter)) / (item.iteration + iter)
  item.iteration = item.iteration + iter
  calc_fitness(item)
end
function new_item()
  local item = {}
  item.apl = new_apl()
  eval(item)
  while item.dps < 0 do
    mutation(item.apl)
    item.signature = nil
    eval(item)
  end
  return item
end
function item_mutation(base)
  local item = {}
  item.apl = deepcopy(base.apl)
  mutation(item.apl)
  return item
end
function item_chiasma(base1, base2)
  local item1 = {}
  local item2 = {}
  item1.apl = deepcopy(base1.apl)
  item2.apl = deepcopy(base2.apl)
  chiasma(item1.apl, item2.apl)
  return item1, item2
end
pool = {}
print("Evaluate default actions as benchmark...")
SetParam("default_actions", 1)
benchmark = Run()
SetParam("default_actions", 0)
CreatePlotChart(3)
io.output("aplga.txt")
gen = 1
print("Generate first generation...")
for i = 1, pool_size do
  pool[i] = new_item()
  print(i.."/"..pool_size.." generated")
end
collectgarbage()
count_new = new_chiasma + new_mutation + new_double_mutation
while true do
  print("Gen"..gen.." start")
  for i = 1, new_chiasma, 2 do
    local candidate1 = math.random(pool_size)
    local candidate2 = math.random(pool_size)
    local candidate3 = math.random(pool_size)
    local candidate4 = math.random(pool_size)
    pool[pool_size + i], pool[pool_size + i + 1] =
    item_chiasma(pool[math.min(candidate1, candidate2)], pool[math.min(candidate3, candidate4)])
  end
  for i = 1, new_mutation do
    local candidate1 = math.random(pool_size)
    local candidate2 = math.random(pool_size)
    pool[pool_size + new_chiasma + i] = item_mutation(pool[math.min(candidate1, candidate2)])
  end
  for i = 1, new_double_mutation do
    local candidate = math.random(new_mutation)
    pool[pool_size + new_chiasma + new_mutation + i] =
    item_mutation(pool[pool_size + new_chiasma + candidate])
  end
  print("First pass evaluation...")
  for i = 1, count_new do
    eval(pool[pool_size + i])
  end
  table.sort(pool, function(a,b) return a.fitness > b.fitness end)
  local fine = false
  print("Confidence checking...")
  Silence(false)
  while not fine do
    fine = true
    for i = 1, pool_size do
      for j = pool_size + 1, pool_size + count_new do
        if DPSCompareConfidence(pool[i].fitness, pool[i].fitness_error,
                                pool[j].fitness, pool[j].fitness_error) < confidence then
            if pool[i].dpse > error_tolerance then
                eval(pool[i])
                fine = false
            end
            if pool[j].dpse > error_tolerance then
                eval(pool[j])
                fine = false
            end
        end
      end
    end
    table.sort(pool, function(a,b) return a.fitness > b.fitness end)
  end
  Silence(true)
  print("Select...")
  for i = pool_size + 1, pool_size + count_new do
    pool[i] = nil
  end
  collectgarbage()
  AddPlotData(gen, benchmark, pool[1].dps, pool[pool_size].dps)
  FinishPlotChart()
  print("Gen"..gen..", max: "..pool[1].dps..", min: "..pool[pool_size].dps)
  print("/* START OF BEST APL */")
  print(dump(pool[1].apl))
  io.write("Gen"..gen..", DPS: "..pool[1].dps.."\n")
  io.write("/* START OF BEST APL */\n")
  io.write(dump(pool[1].apl))
  io.flush()
  gen = gen + 1
end
    )RAWSCRIPT";
    return script;
}